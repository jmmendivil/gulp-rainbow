'use strict';

var path = require('path'),
    through = require('through2'),
    iconfont = require('gulp-iconfont'),
    svgmin = require('gulp-svgmin'),
    swig = require('gulp-swig'),
    rename = require('gulp-rename'),
    util = require('gulp-util'),
    chalk = util.colors,
    merge = require('merge-stream');

module.exports = function(options) {

  var compile = function(stream, errorHandler) {
    return stream
      .pipe(rewriteGlobals())
      .pipe(svgmin())
      .pipe(iconfont(options.paths.icons.iconFont))
      .on('error', errorHandler)
      .on('glyphs', handleIconGlyphs(options.paths.icons, options.gulp))
  }

  var global_path = path.join(process.cwd(), 'src', options.cwd, 'sites', '_global', 'icons', options.paths.icons.glob)
  var local_path  = path.join(options.paths.icons.cwd, options.paths.icons.glob);
  var src_paths   = [local_path, global_path];

  return {
    src: src_paths,
    dest: path.join(options.paths.dest, options.paths.fonts.dest),
    pipe: compile
  }

}

var rewriteGlobals = function() {
  var icons = []
  return through.obj(function(file, e, cb) { 
      var fname = file.relative
      if (icons.indexOf(fname) === -1) {
        icons.push(fname)
        this.push(file)
      }
      cb()
    })
}

var handleIconGlyphs = function(options, gulp) {

  gulp = gulp || require('gulp');

  return function(glyphs, iconFontConfig) {

    var processIconTemplates = function(data, name) {

      var template = data.template,
          outputName = data.outputName,
          outputDir = data.outputDir || options.defaultTemplateDest,
          fontPath = data.fontPath || options.defaultFontPath;

      console.log("Generating " + name + " iconFont file to " + chalk.blue(path.join(outputDir, outputName)));

      return gulp.src(template)
        .pipe(swig({
          data: {
            icons: glyphs.map(function(icon) {
              return {
                name: icon.name,
                code: icon.unicode[0].charCodeAt(0).toString(16).toUpperCase()
              }
            }),

            fontName: options.iconFont.fontName,
            fontPath: fontPath,
            className: options.className,
            comment: 'DO NOT EDIT DIRECTLY!\n// Generated by lib/tasks/icons.js\n// from ' + template
          }
        }))

        //TODO:  Add stream inspection, find out why are the files not being written

        .on('error', function(err) {
          console.log(chalk.red("ERROR! "), err);
        })
        .pipe(rename(outputName))
        .pipe(gulp.dest(outputDir));
    };

    var templateStreams = [];
    for(var t in options.templates) {
      templateStreams.push(processIconTemplates(options.templates[t], t.toUpperCase()));
    }
    return merge(templateStreams);
  }

}
